/*
 * LOXILIGHT VPN API
 * LOXILIGHT VPN API for CPE Scenarios
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoxilightVpnApi);
  }
}(this, function(expect, LoxilightVpnApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LoxilightVpnApi.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('configVpnIkepoliciesGet', function() {
        it('should call configVpnIkepoliciesGet successfully', function(done) {
          // TODO: uncomment configVpnIkepoliciesGet call and complete the assertions
          /*

          instance.configVpnIkepoliciesGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIkepoliciesIkepolicyIdDelete', function() {
        it('should call configVpnIkepoliciesIkepolicyIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIkepoliciesIkepolicyIdDelete call
          /*
          var ikepolicyId = "ikepolicyId_example";

          instance.configVpnIkepoliciesIkepolicyIdDelete(ikepolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIkepoliciesIkepolicyIdGet', function() {
        it('should call configVpnIkepoliciesIkepolicyIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIkepoliciesIkepolicyIdGet call and complete the assertions
          /*
          var ikepolicyId = "ikepolicyId_example";

          instance.configVpnIkepoliciesIkepolicyIdGet(ikepolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIkepoliciesIkepolicyIdPut', function() {
        it('should call configVpnIkepoliciesIkepolicyIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIkepoliciesIkepolicyIdPut call
          /*
          var ikepolicyId = "ikepolicyId_example";
          var attr = new LoxilightVpnApi.IKEPolicyEntry();
          attr.id = "";
          attr.name = "";
          attr.description = "";
          attr.authAlgorithm = "";
          attr.encryptionAlgorithm = "";
          attr.pfs = "";
          attr.value = 0;
          attr.phase1NegotiationMode = "";
          attr.units = "";
          attr.lifetime = ;
          attr.ikeVersion = "";

          instance.configVpnIkepoliciesIkepolicyIdPut(ikepolicyId, attr, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIkepoliciesPost', function() {
        it('should call configVpnIkepoliciesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIkepoliciesPost call
          /*
          var attr = new LoxilightVpnApi.IKEPolicyEntry();
          attr.id = "";
          attr.name = "";
          attr.description = "";
          attr.authAlgorithm = "";
          attr.encryptionAlgorithm = "";
          attr.pfs = "";
          attr.value = 0;
          attr.phase1NegotiationMode = "";
          attr.units = "";
          attr.lifetime = ;
          attr.ikeVersion = "";

          instance.configVpnIkepoliciesPost(attr, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIpsecSiteConnectionsConnectionIdDelete', function() {
        it('should call configVpnIpsecSiteConnectionsConnectionIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIpsecSiteConnectionsConnectionIdDelete call
          /*
          var connectionId = "connectionId_example";

          instance.configVpnIpsecSiteConnectionsConnectionIdDelete(connectionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIpsecSiteConnectionsConnectionIdGet', function() {
        it('should call configVpnIpsecSiteConnectionsConnectionIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIpsecSiteConnectionsConnectionIdGet call and complete the assertions
          /*
          var connectionId = "connectionId_example";

          instance.configVpnIpsecSiteConnectionsConnectionIdGet(connectionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIpsecSiteConnectionsConnectionIdPut', function() {
        it('should call configVpnIpsecSiteConnectionsConnectionIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIpsecSiteConnectionsConnectionIdPut call
          /*
          var connectionId = "connectionId_example";
          var attr = new LoxilightVpnApi.IPSecPolicyEntry();
          attr.id = "";
          attr.name = "";
          attr.description = "";
          attr.authAlgorithm = "";
          attr.encapsulationMode = "";
          attr.encryptionAlgorithm = "";
          attr.pfs = "";
          attr.value = 0;
          attr.transformProtocol = "";
          attr.units = "";
          attr.lifetime = ;

          instance.configVpnIpsecSiteConnectionsConnectionIdPut(connectionId, attr, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIpsecSiteConnectionsGet', function() {
        it('should call configVpnIpsecSiteConnectionsGet successfully', function(done) {
          // TODO: uncomment configVpnIpsecSiteConnectionsGet call and complete the assertions
          /*

          instance.configVpnIpsecSiteConnectionsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIpsecSiteConnectionsPost', function() {
        it('should call configVpnIpsecSiteConnectionsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIpsecSiteConnectionsPost call
          /*
          var attr = new LoxilightVpnApi.IPSecSiteConnectionEntry();
          attr.id = "";
          attr.name = "";
          attr.description = "";
          attr.authMode = "";
          attr.ikepolicyId = "";
          attr.vpnserviceId = "";
          attr.ipsecpolicyId = "";
          attr.peerAddress = "";
          attr.psk = "";
          attr.adminStateUp = false;
          attr.status = "";
          attr.interval = 0;
          attr.mtu = 0;
          attr.timeout = 0;
          attr.action = "";
          attr.routeMode = "";

          instance.configVpnIpsecSiteConnectionsPost(attr, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIpsecpoliciesGet', function() {
        it('should call configVpnIpsecpoliciesGet successfully', function(done) {
          // TODO: uncomment configVpnIpsecpoliciesGet call and complete the assertions
          /*

          instance.configVpnIpsecpoliciesGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIpsecpoliciesIpsecpolicyIdDelete', function() {
        it('should call configVpnIpsecpoliciesIpsecpolicyIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIpsecpoliciesIpsecpolicyIdDelete call
          /*
          var ipsecpolicyId = "ipsecpolicyId_example";

          instance.configVpnIpsecpoliciesIpsecpolicyIdDelete(ipsecpolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIpsecpoliciesIpsecpolicyIdGet', function() {
        it('should call configVpnIpsecpoliciesIpsecpolicyIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIpsecpoliciesIpsecpolicyIdGet call and complete the assertions
          /*
          var ipsecpolicyId = "ipsecpolicyId_example";

          instance.configVpnIpsecpoliciesIpsecpolicyIdGet(ipsecpolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIpsecpoliciesIpsecpolicyIdPut', function() {
        it('should call configVpnIpsecpoliciesIpsecpolicyIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIpsecpoliciesIpsecpolicyIdPut call
          /*
          var ipsecpolicyId = "ipsecpolicyId_example";
          var attr = new LoxilightVpnApi.IPSecPolicyEntry();
          attr.id = "";
          attr.name = "";
          attr.description = "";
          attr.authAlgorithm = "";
          attr.encapsulationMode = "";
          attr.encryptionAlgorithm = "";
          attr.pfs = "";
          attr.value = 0;
          attr.transformProtocol = "";
          attr.units = "";
          attr.lifetime = ;

          instance.configVpnIpsecpoliciesIpsecpolicyIdPut(ipsecpolicyId, attr, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnIpsecpoliciesPost', function() {
        it('should call configVpnIpsecpoliciesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnIpsecpoliciesPost call
          /*
          var attr = new LoxilightVpnApi.IPSecPolicyEntry();
          attr.id = "";
          attr.name = "";
          attr.description = "";
          attr.authAlgorithm = "";
          attr.encapsulationMode = "";
          attr.encryptionAlgorithm = "";
          attr.pfs = "";
          attr.value = 0;
          attr.transformProtocol = "";
          attr.units = "";
          attr.lifetime = ;

          instance.configVpnIpsecpoliciesPost(attr, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnVpnservicesGet', function() {
        it('should call configVpnVpnservicesGet successfully', function(done) {
          // TODO: uncomment configVpnVpnservicesGet call and complete the assertions
          /*

          instance.configVpnVpnservicesGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnVpnservicesPost', function() {
        it('should call configVpnVpnservicesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnVpnservicesPost call
          /*
          var attr = new LoxilightVpnApi.VPNServiceEntry();
          attr.id = "";
          attr.name = "";
          attr.description = "";
          attr.externalV6Ip = "";
          attr.externalV4Ip = "";
          attr.status = "";
          attr.adminStateUp = false;
          attr.routerId = "";
          attr.subnetId = "";

          instance.configVpnVpnservicesPost(attr, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnVpnservicesServiceIdDelete', function() {
        it('should call configVpnVpnservicesServiceIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnVpnservicesServiceIdDelete call
          /*
          var serviceId = "serviceId_example";

          instance.configVpnVpnservicesServiceIdDelete(serviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnVpnservicesServiceIdGet', function() {
        it('should call configVpnVpnservicesServiceIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnVpnservicesServiceIdGet call and complete the assertions
          /*
          var serviceId = "serviceId_example";

          instance.configVpnVpnservicesServiceIdGet(serviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configVpnVpnservicesServiceIdPut', function() {
        it('should call configVpnVpnservicesServiceIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for configVpnVpnservicesServiceIdPut call
          /*
          var serviceId = "serviceId_example";
          var attr = new LoxilightVpnApi.VPNServiceEntry();
          attr.id = "";
          attr.name = "";
          attr.description = "";
          attr.externalV6Ip = "";
          attr.externalV4Ip = "";
          attr.status = "";
          attr.adminStateUp = false;
          attr.routerId = "";
          attr.subnetId = "";

          instance.configVpnVpnservicesServiceIdPut(serviceId, attr, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
