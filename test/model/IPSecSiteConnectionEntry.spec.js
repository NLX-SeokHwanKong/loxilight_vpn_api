/*
 * LOXILIGHT VPN API
 * LOXILIGHT VPN API for CPE Scenarios
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoxilightVpnApi);
  }
}(this, function(expect, LoxilightVpnApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('IPSecSiteConnectionEntry', function() {
      beforeEach(function() {
        instance = new LoxilightVpnApi.IPSecSiteConnectionEntry();
      });

      it('should create an instance of IPSecSiteConnectionEntry', function() {
        // TODO: update the code to test IPSecSiteConnectionEntry
        expect(instance).to.be.a(LoxilightVpnApi.IPSecSiteConnectionEntry);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property authMode (base name: "auth_mode")', function() {
        // TODO: update the code to test the property authMode
        expect(instance).to.have.property('authMode');
        // expect(instance.authMode).to.be(expectedValueLiteral);
      });

      it('should have the property ikepolicyId (base name: "ikepolicy_id")', function() {
        // TODO: update the code to test the property ikepolicyId
        expect(instance).to.have.property('ikepolicyId');
        // expect(instance.ikepolicyId).to.be(expectedValueLiteral);
      });

      it('should have the property vpnserviceId (base name: "vpnservice_id")', function() {
        // TODO: update the code to test the property vpnserviceId
        expect(instance).to.have.property('vpnserviceId');
        // expect(instance.vpnserviceId).to.be(expectedValueLiteral);
      });

      it('should have the property ipsecpolicyId (base name: "ipsecpolicy_id")', function() {
        // TODO: update the code to test the property ipsecpolicyId
        expect(instance).to.have.property('ipsecpolicyId');
        // expect(instance.ipsecpolicyId).to.be(expectedValueLiteral);
      });

      it('should have the property peerAddress (base name: "peer_address")', function() {
        // TODO: update the code to test the property peerAddress
        expect(instance).to.have.property('peerAddress');
        // expect(instance.peerAddress).to.be(expectedValueLiteral);
      });

      it('should have the property psk (base name: "psk")', function() {
        // TODO: update the code to test the property psk
        expect(instance).to.have.property('psk');
        // expect(instance.psk).to.be(expectedValueLiteral);
      });

      it('should have the property adminStateUp (base name: "admin_state_up")', function() {
        // TODO: update the code to test the property adminStateUp
        expect(instance).to.have.property('adminStateUp');
        // expect(instance.adminStateUp).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property interval (base name: "interval")', function() {
        // TODO: update the code to test the property interval
        expect(instance).to.have.property('interval');
        // expect(instance.interval).to.be(expectedValueLiteral);
      });

      it('should have the property mtu (base name: "mtu")', function() {
        // TODO: update the code to test the property mtu
        expect(instance).to.have.property('mtu');
        // expect(instance.mtu).to.be(expectedValueLiteral);
      });

      it('should have the property timeout (base name: "timeout")', function() {
        // TODO: update the code to test the property timeout
        expect(instance).to.have.property('timeout');
        // expect(instance.timeout).to.be(expectedValueLiteral);
      });

      it('should have the property action (base name: "action")', function() {
        // TODO: update the code to test the property action
        expect(instance).to.have.property('action');
        // expect(instance.action).to.be(expectedValueLiteral);
      });

      it('should have the property routeMode (base name: "route_mode")', function() {
        // TODO: update the code to test the property routeMode
        expect(instance).to.have.property('routeMode');
        // expect(instance.routeMode).to.be(expectedValueLiteral);
      });

    });
  });

}));
