/*
 * LOXILIGHT VPN API
 * LOXILIGHT VPN API for CPE Scenarios
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoxilightVpnApi);
  }
}(this, function(expect, LoxilightVpnApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('VPNServiceEntry', function() {
      beforeEach(function() {
        instance = new LoxilightVpnApi.VPNServiceEntry();
      });

      it('should create an instance of VPNServiceEntry', function() {
        // TODO: update the code to test VPNServiceEntry
        expect(instance).to.be.a(LoxilightVpnApi.VPNServiceEntry);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property externalV6Ip (base name: "external_v6_ip")', function() {
        // TODO: update the code to test the property externalV6Ip
        expect(instance).to.have.property('externalV6Ip');
        // expect(instance.externalV6Ip).to.be(expectedValueLiteral);
      });

      it('should have the property externalV4Ip (base name: "external_v4_ip")', function() {
        // TODO: update the code to test the property externalV4Ip
        expect(instance).to.have.property('externalV4Ip');
        // expect(instance.externalV4Ip).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property adminStateUp (base name: "admin_state_up")', function() {
        // TODO: update the code to test the property adminStateUp
        expect(instance).to.have.property('adminStateUp');
        // expect(instance.adminStateUp).to.be(expectedValueLiteral);
      });

      it('should have the property routerId (base name: "router_id")', function() {
        // TODO: update the code to test the property routerId
        expect(instance).to.have.property('routerId');
        // expect(instance.routerId).to.be(expectedValueLiteral);
      });

      it('should have the property subnetId (base name: "subnet_id")', function() {
        // TODO: update the code to test the property subnetId
        expect(instance).to.have.property('subnetId');
        // expect(instance.subnetId).to.be(expectedValueLiteral);
      });

    });
  });

}));
