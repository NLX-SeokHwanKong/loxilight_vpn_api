/*
 * LOXILIGHT VPN API
 * LOXILIGHT VPN API for CPE Scenarios
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoxilightVpnApi);
  }
}(this, function(expect, LoxilightVpnApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('IPSecPolicyEntry', function() {
      beforeEach(function() {
        instance = new LoxilightVpnApi.IPSecPolicyEntry();
      });

      it('should create an instance of IPSecPolicyEntry', function() {
        // TODO: update the code to test IPSecPolicyEntry
        expect(instance).to.be.a(LoxilightVpnApi.IPSecPolicyEntry);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property authAlgorithm (base name: "auth_algorithm")', function() {
        // TODO: update the code to test the property authAlgorithm
        expect(instance).to.have.property('authAlgorithm');
        // expect(instance.authAlgorithm).to.be(expectedValueLiteral);
      });

      it('should have the property encapsulationMode (base name: "encapsulation_mode")', function() {
        // TODO: update the code to test the property encapsulationMode
        expect(instance).to.have.property('encapsulationMode');
        // expect(instance.encapsulationMode).to.be(expectedValueLiteral);
      });

      it('should have the property encryptionAlgorithm (base name: "encryption_algorithm")', function() {
        // TODO: update the code to test the property encryptionAlgorithm
        expect(instance).to.have.property('encryptionAlgorithm');
        // expect(instance.encryptionAlgorithm).to.be(expectedValueLiteral);
      });

      it('should have the property pfs (base name: "pfs")', function() {
        // TODO: update the code to test the property pfs
        expect(instance).to.have.property('pfs');
        // expect(instance.pfs).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property transformProtocol (base name: "transform_protocol")', function() {
        // TODO: update the code to test the property transformProtocol
        expect(instance).to.have.property('transformProtocol');
        // expect(instance.transformProtocol).to.be(expectedValueLiteral);
      });

      it('should have the property units (base name: "units")', function() {
        // TODO: update the code to test the property units
        expect(instance).to.have.property('units');
        // expect(instance.units).to.be(expectedValueLiteral);
      });

      it('should have the property lifetime (base name: "lifetime")', function() {
        // TODO: update the code to test the property lifetime
        expect(instance).to.have.property('lifetime');
        // expect(instance.lifetime).to.be(expectedValueLiteral);
      });

    });
  });

}));
