/*
 * LOXILIGHT VPN API
 * LOXILIGHT VPN API for CPE Scenarios
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.LoxilightVpnApi) {
      root.LoxilightVpnApi = {};
    }
    root.LoxilightVpnApi.IPSecPolicyEntry = factory(root.LoxilightVpnApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The IPSecPolicyEntry model module.
   * @module model/IPSecPolicyEntry
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>IPSecPolicyEntry</code>.
   * @alias module:model/IPSecPolicyEntry
   * @class
   * @param id {String} The ID of the IKE policy.
   * @param name {String} Human-readable name of the resource. Default is an empty string.
   */
  var exports = function(id, name) {
    this.id = id;
    this.name = name;
  };

  /**
   * Constructs a <code>IPSecPolicyEntry</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IPSecPolicyEntry} obj Optional instance to populate.
   * @return {module:model/IPSecPolicyEntry} The populated <code>IPSecPolicyEntry</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('auth_algorithm'))
        obj.authAlgorithm = ApiClient.convertToType(data['auth_algorithm'], 'String');
      if (data.hasOwnProperty('encapsulation_mode'))
        obj.encapsulationMode = ApiClient.convertToType(data['encapsulation_mode'], 'String');
      if (data.hasOwnProperty('encryption_algorithm'))
        obj.encryptionAlgorithm = ApiClient.convertToType(data['encryption_algorithm'], 'String');
      if (data.hasOwnProperty('pfs'))
        obj.pfs = ApiClient.convertToType(data['pfs'], 'String');
      if (data.hasOwnProperty('value'))
        obj.value = ApiClient.convertToType(data['value'], 'Number');
      if (data.hasOwnProperty('transform_protocol'))
        obj.transformProtocol = ApiClient.convertToType(data['transform_protocol'], 'String');
      if (data.hasOwnProperty('units'))
        obj.units = ApiClient.convertToType(data['units'], 'String');
      if (data.hasOwnProperty('lifetime'))
        obj.lifetime = ApiClient.convertToType(data['lifetime'], Object);
    }
    return obj;
  }

  /**
   * The ID of the IKE policy.
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Human-readable name of the resource. Default is an empty string.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * A human-readable description for the resource. Default is an empty string.
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * The authentication hash algorithm. Valid values are sha1, sha256, sha384, sha512. The default is sha1.
   * @member {String} authAlgorithm
   */
  exports.prototype.authAlgorithm = undefined;

  /**
   * The encapsulation mode. A valid value is tunnel or transport. Default is tunnel.
   * @member {String} encapsulationMode
   */
  exports.prototype.encapsulationMode = undefined;

  /**
   * The encryption algorithm. A valid value is 3des, aes-128, aes-192, aes-256, and so on. Default is aes-128.
   * @member {String} encryptionAlgorithm
   */
  exports.prototype.encryptionAlgorithm = undefined;

  /**
   * Perfect forward secrecy (PFS). A valid value is Group2, Group5, Group14, and so on. Default is Group5.
   * @member {String} pfs
   */
  exports.prototype.pfs = undefined;

  /**
   * The lifetime value, as a positive integer. The lifetime consists of a unit and integer value. You can omit either the unit or value portion of the lifetime. Default unit is seconds and default value is 3600.
   * @member {Number} value
   */
  exports.prototype.value = undefined;

  /**
   * The transform protocol. A valid value is ESP, AH, or AH-ESP. Default is ESP.
   * @member {String} transformProtocol
   */
  exports.prototype.transformProtocol = undefined;

  /**
   * The units for the lifetime of the security association. The lifetime consists of a unit and integer value. You can omit either the unit or value portion of the lifetime. Default unit is seconds and default value is 3600.
   * @member {String} units
   */
  exports.prototype.units = undefined;

  /**
   * The lifetime of the security association. The lifetime consists of a unit and integer value. You can omit either the unit or value portion of the lifetime. Default unit is seconds and default value is 3600.
   * @member {Object} lifetime
   */
  exports.prototype.lifetime = undefined;


  return exports;

}));
