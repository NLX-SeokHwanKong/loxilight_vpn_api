/*
 * LOXILIGHT VPN API
 * LOXILIGHT VPN API for CPE Scenarios
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.LoxilightVpnApi) {
      root.LoxilightVpnApi = {};
    }
    root.LoxilightVpnApi.VPNServiceEntry = factory(root.LoxilightVpnApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The VPNServiceEntry model module.
   * @module model/VPNServiceEntry
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>VPNServiceEntry</code>.
   * @alias module:model/VPNServiceEntry
   * @class
   * @param id {String} The ID of the IKE policy.
   * @param name {String} Human-readable name of the resource. Default is an empty string.
   */
  var exports = function(id, name) {
    this.id = id;
    this.name = name;
  };

  /**
   * Constructs a <code>VPNServiceEntry</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VPNServiceEntry} obj Optional instance to populate.
   * @return {module:model/VPNServiceEntry} The populated <code>VPNServiceEntry</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('external_v6_ip'))
        obj.externalV6Ip = ApiClient.convertToType(data['external_v6_ip'], 'String');
      if (data.hasOwnProperty('external_v4_ip'))
        obj.externalV4Ip = ApiClient.convertToType(data['external_v4_ip'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('admin_state_up'))
        obj.adminStateUp = ApiClient.convertToType(data['admin_state_up'], 'Boolean');
      if (data.hasOwnProperty('router_id'))
        obj.routerId = ApiClient.convertToType(data['router_id'], 'String');
      if (data.hasOwnProperty('subnet_id'))
        obj.subnetId = ApiClient.convertToType(data['subnet_id'], 'String');
    }
    return obj;
  }

  /**
   * The ID of the IKE policy.
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Human-readable name of the resource. Default is an empty string.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * A human-readable description for the resource. Default is an empty string.
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * Read-only external (public) IPv6 address that is used for the VPN service. The VPN plugin sets this address if an IPv6 interface is available.
   * @member {String} externalV6Ip
   */
  exports.prototype.externalV6Ip = undefined;

  /**
   * Read-only external (public) IPv4 address that is used for the VPN service. The VPN plugin sets this address if an IPv4 interface is available.
   * @member {String} externalV4Ip
   */
  exports.prototype.externalV4Ip = undefined;

  /**
   * Indicates whether IPsec VPN service is currently operational. Values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.
   * @member {String} status
   */
  exports.prototype.status = undefined;

  /**
   * The administrative state of the resource, which is up (true) or down (false).
   * @member {Boolean} adminStateUp
   */
  exports.prototype.adminStateUp = undefined;

  /**
   * The ID of the router.
   * @member {String} routerId
   */
  exports.prototype.routerId = undefined;

  /**
   * If you specify only a subnet UUID, OpenStack Networking allocates an available IP from that subnet to the port. If you specify both a subnet UUID and an IP address, OpenStack Networking tries to allocate the address to the port.
   * @member {String} subnetId
   */
  exports.prototype.subnetId = undefined;


  return exports;

}));
