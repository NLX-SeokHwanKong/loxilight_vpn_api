/*
 * LOXILIGHT VPN API
 * LOXILIGHT VPN API for CPE Scenarios
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/IKEPolicyEntry', 'model/IPSecPolicyEntry', 'model/IPSecSiteConnectionEntry', 'model/VPNServiceEntry'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/IKEPolicyEntry'), require('../model/IPSecPolicyEntry'), require('../model/IPSecSiteConnectionEntry'), require('../model/VPNServiceEntry'));
  } else {
    // Browser globals (root is window)
    if (!root.LoxilightVpnApi) {
      root.LoxilightVpnApi = {};
    }
    root.LoxilightVpnApi.DefaultApi = factory(root.LoxilightVpnApi.ApiClient, root.LoxilightVpnApi.Error, root.LoxilightVpnApi.IKEPolicyEntry, root.LoxilightVpnApi.IPSecPolicyEntry, root.LoxilightVpnApi.IPSecSiteConnectionEntry, root.LoxilightVpnApi.VPNServiceEntry);
  }
}(this, function(ApiClient, Error, IKEPolicyEntry, IPSecPolicyEntry, IPSecSiteConnectionEntry, VPNServiceEntry) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the configVpnIkepoliciesGet operation.
     * @callback module:api/DefaultApi~configVpnIkepoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists IKE policies.
     * Lists IKE policies.
     * @param {module:api/DefaultApi~configVpnIkepoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.configVpnIkepoliciesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/config/vpn/ikepolicies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIkepoliciesIkepolicyIdDelete operation.
     * @callback module:api/DefaultApi~configVpnIkepoliciesIkepolicyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an IKE policy
     * Removes an IKE policy.
     * @param {String} ikepolicyId ikepolicy_id as a string
     * @param {module:api/DefaultApi~configVpnIkepoliciesIkepolicyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnIkepoliciesIkepolicyIdDelete = function(ikepolicyId, callback) {
      var postBody = null;

      // verify the required parameter 'ikepolicyId' is set
      if (ikepolicyId === undefined || ikepolicyId === null) {
        throw new Error("Missing the required parameter 'ikepolicyId' when calling configVpnIkepoliciesIkepolicyIdDelete");
      }


      var pathParams = {
        'ikepolicy_id': ikepolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/ikepolicies/{ikepolicy_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIkepoliciesIkepolicyIdGet operation.
     * @callback module:api/DefaultApi~configVpnIkepoliciesIkepolicyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows details for an IKE policy.
     * Shows details for an IKE policy.
     * @param {String} ikepolicyId The ID of the IKE policy.
     * @param {module:api/DefaultApi~configVpnIkepoliciesIkepolicyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.configVpnIkepoliciesIkepolicyIdGet = function(ikepolicyId, callback) {
      var postBody = null;

      // verify the required parameter 'ikepolicyId' is set
      if (ikepolicyId === undefined || ikepolicyId === null) {
        throw new Error("Missing the required parameter 'ikepolicyId' when calling configVpnIkepoliciesIkepolicyIdGet");
      }


      var pathParams = {
        'ikepolicy_id': ikepolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/config/vpn/ikepolicies/{ikepolicy_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIkepoliciesIkepolicyIdPut operation.
     * @callback module:api/DefaultApi~configVpnIkepoliciesIkepolicyIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates policy settings in an IKE policy.
     * Updates policy settings in an IKE policy.
     * @param {String} ikepolicyId IKE Policy Id
     * @param {module:model/IKEPolicyEntry} attr attributes for IKE Policy
     * @param {module:api/DefaultApi~configVpnIkepoliciesIkepolicyIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnIkepoliciesIkepolicyIdPut = function(ikepolicyId, attr, callback) {
      var postBody = attr;

      // verify the required parameter 'ikepolicyId' is set
      if (ikepolicyId === undefined || ikepolicyId === null) {
        throw new Error("Missing the required parameter 'ikepolicyId' when calling configVpnIkepoliciesIkepolicyIdPut");
      }

      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling configVpnIkepoliciesIkepolicyIdPut");
      }


      var pathParams = {
        'ikepolicy_id': ikepolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/ikepolicies/{ikepolicy_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIkepoliciesPost operation.
     * @callback module:api/DefaultApi~configVpnIkepoliciesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create IKE policy
     * Create IKE policy
     * @param {module:model/IKEPolicyEntry} attr attributes for IKE Policy
     * @param {module:api/DefaultApi~configVpnIkepoliciesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnIkepoliciesPost = function(attr, callback) {
      var postBody = attr;

      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling configVpnIkepoliciesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/ikepolicies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIpsecSiteConnectionsConnectionIdDelete operation.
     * @callback module:api/DefaultApi~configVpnIpsecSiteConnectionsConnectionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an IPSec policy
     * Removes an IPSec policy.
     * @param {String} connectionId connection_id as a string
     * @param {module:api/DefaultApi~configVpnIpsecSiteConnectionsConnectionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnIpsecSiteConnectionsConnectionIdDelete = function(connectionId, callback) {
      var postBody = null;

      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling configVpnIpsecSiteConnectionsConnectionIdDelete");
      }


      var pathParams = {
        'connection_id': connectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/ipsec-site-connections/{connection_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIpsecSiteConnectionsConnectionIdGet operation.
     * @callback module:api/DefaultApi~configVpnIpsecSiteConnectionsConnectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows details for an IPSec policy.
     * Shows details for an IPSec policy.
     * @param {String} connectionId The ID of the IPSec policy.
     * @param {module:api/DefaultApi~configVpnIpsecSiteConnectionsConnectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.configVpnIpsecSiteConnectionsConnectionIdGet = function(connectionId, callback) {
      var postBody = null;

      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling configVpnIpsecSiteConnectionsConnectionIdGet");
      }


      var pathParams = {
        'connection_id': connectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/config/vpn/ipsec-site-connections/{connection_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIpsecSiteConnectionsConnectionIdPut operation.
     * @callback module:api/DefaultApi~configVpnIpsecSiteConnectionsConnectionIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates policy settings in an IPSec policy.
     * Updates policy settings in an IPSec policy.
     * @param {String} connectionId IPSec Policy Id
     * @param {module:model/IPSecPolicyEntry} attr attributes for IPSec Policy
     * @param {module:api/DefaultApi~configVpnIpsecSiteConnectionsConnectionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnIpsecSiteConnectionsConnectionIdPut = function(connectionId, attr, callback) {
      var postBody = attr;

      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling configVpnIpsecSiteConnectionsConnectionIdPut");
      }

      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling configVpnIpsecSiteConnectionsConnectionIdPut");
      }


      var pathParams = {
        'connection_id': connectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/ipsec-site-connections/{connection_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIpsecSiteConnectionsGet operation.
     * @callback module:api/DefaultApi~configVpnIpsecSiteConnectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists IPSecSiteConnection policies.
     * Lists IPSecSiteConnection policies.
     * @param {module:api/DefaultApi~configVpnIpsecSiteConnectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.configVpnIpsecSiteConnectionsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/config/vpn/ipsec-site-connections', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIpsecSiteConnectionsPost operation.
     * @callback module:api/DefaultApi~configVpnIpsecSiteConnectionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create IPSecSiteConnection policy
     * Create IPSecSiteConnection policy
     * @param {module:model/IPSecSiteConnectionEntry} attr attributes for IPSecSiteConnection Policy
     * @param {module:api/DefaultApi~configVpnIpsecSiteConnectionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnIpsecSiteConnectionsPost = function(attr, callback) {
      var postBody = attr;

      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling configVpnIpsecSiteConnectionsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/ipsec-site-connections', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIpsecpoliciesGet operation.
     * @callback module:api/DefaultApi~configVpnIpsecpoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists IPSec policies.
     * Lists IPSec policies.
     * @param {module:api/DefaultApi~configVpnIpsecpoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.configVpnIpsecpoliciesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/config/vpn/ipsecpolicies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIpsecpoliciesIpsecpolicyIdDelete operation.
     * @callback module:api/DefaultApi~configVpnIpsecpoliciesIpsecpolicyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an IPSec policy
     * Removes an IPSec policy.
     * @param {String} ipsecpolicyId ipsecpolicy_id as a string
     * @param {module:api/DefaultApi~configVpnIpsecpoliciesIpsecpolicyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnIpsecpoliciesIpsecpolicyIdDelete = function(ipsecpolicyId, callback) {
      var postBody = null;

      // verify the required parameter 'ipsecpolicyId' is set
      if (ipsecpolicyId === undefined || ipsecpolicyId === null) {
        throw new Error("Missing the required parameter 'ipsecpolicyId' when calling configVpnIpsecpoliciesIpsecpolicyIdDelete");
      }


      var pathParams = {
        'ipsecpolicy_id': ipsecpolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/ipsecpolicies/{ipsecpolicy_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIpsecpoliciesIpsecpolicyIdGet operation.
     * @callback module:api/DefaultApi~configVpnIpsecpoliciesIpsecpolicyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows details for an IPSec policy.
     * Shows details for an IPSec policy.
     * @param {String} ipsecpolicyId The ID of the IPSec policy.
     * @param {module:api/DefaultApi~configVpnIpsecpoliciesIpsecpolicyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.configVpnIpsecpoliciesIpsecpolicyIdGet = function(ipsecpolicyId, callback) {
      var postBody = null;

      // verify the required parameter 'ipsecpolicyId' is set
      if (ipsecpolicyId === undefined || ipsecpolicyId === null) {
        throw new Error("Missing the required parameter 'ipsecpolicyId' when calling configVpnIpsecpoliciesIpsecpolicyIdGet");
      }


      var pathParams = {
        'ipsecpolicy_id': ipsecpolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/config/vpn/ipsecpolicies/{ipsecpolicy_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIpsecpoliciesIpsecpolicyIdPut operation.
     * @callback module:api/DefaultApi~configVpnIpsecpoliciesIpsecpolicyIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates policy settings in an IPSec policy.
     * Updates policy settings in an IPSec policy.
     * @param {String} ipsecpolicyId IPSec Policy Id
     * @param {module:model/IPSecPolicyEntry} attr attributes for IPSec Policy
     * @param {module:api/DefaultApi~configVpnIpsecpoliciesIpsecpolicyIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnIpsecpoliciesIpsecpolicyIdPut = function(ipsecpolicyId, attr, callback) {
      var postBody = attr;

      // verify the required parameter 'ipsecpolicyId' is set
      if (ipsecpolicyId === undefined || ipsecpolicyId === null) {
        throw new Error("Missing the required parameter 'ipsecpolicyId' when calling configVpnIpsecpoliciesIpsecpolicyIdPut");
      }

      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling configVpnIpsecpoliciesIpsecpolicyIdPut");
      }


      var pathParams = {
        'ipsecpolicy_id': ipsecpolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/ipsecpolicies/{ipsecpolicy_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnIpsecpoliciesPost operation.
     * @callback module:api/DefaultApi~configVpnIpsecpoliciesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create IPSec policy
     * Create IPSec policy
     * @param {module:model/IPSecPolicyEntry} attr attributes for IPSec Policy
     * @param {module:api/DefaultApi~configVpnIpsecpoliciesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnIpsecpoliciesPost = function(attr, callback) {
      var postBody = attr;

      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling configVpnIpsecpoliciesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/ipsecpolicies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnVpnservicesGet operation.
     * @callback module:api/DefaultApi~configVpnVpnservicesGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists VPN Service.
     * Lists VPN Service.
     * @param {module:api/DefaultApi~configVpnVpnservicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.configVpnVpnservicesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/config/vpn/vpnservices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnVpnservicesPost operation.
     * @callback module:api/DefaultApi~configVpnVpnservicesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create VPN Service
     * Create VPN Service
     * @param {module:model/VPNServiceEntry} attr attributes for VPN Service
     * @param {module:api/DefaultApi~configVpnVpnservicesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnVpnservicesPost = function(attr, callback) {
      var postBody = attr;

      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling configVpnVpnservicesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/vpnservices', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnVpnservicesServiceIdDelete operation.
     * @callback module:api/DefaultApi~configVpnVpnservicesServiceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an VPN Service
     * Removes an VPN Service.
     * @param {String} serviceId service_id as a string
     * @param {module:api/DefaultApi~configVpnVpnservicesServiceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnVpnservicesServiceIdDelete = function(serviceId, callback) {
      var postBody = null;

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling configVpnVpnservicesServiceIdDelete");
      }


      var pathParams = {
        'service_id': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/vpnservices/{service_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnVpnservicesServiceIdGet operation.
     * @callback module:api/DefaultApi~configVpnVpnservicesServiceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows details for an VPN Service.
     * Shows details for an VPN Service.
     * @param {String} serviceId The ID of the VPN Service.
     * @param {module:api/DefaultApi~configVpnVpnservicesServiceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.configVpnVpnservicesServiceIdGet = function(serviceId, callback) {
      var postBody = null;

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling configVpnVpnservicesServiceIdGet");
      }


      var pathParams = {
        'service_id': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/config/vpn/vpnservices/{service_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configVpnVpnservicesServiceIdPut operation.
     * @callback module:api/DefaultApi~configVpnVpnservicesServiceIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates policy settings in an VPN Service.
     * Updates policy settings in an VPN Service.
     * @param {String} serviceId VPN Service Id
     * @param {module:model/VPNServiceEntry} attr attributes for VPN Service
     * @param {module:api/DefaultApi~configVpnVpnservicesServiceIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configVpnVpnservicesServiceIdPut = function(serviceId, attr, callback) {
      var postBody = attr;

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling configVpnVpnservicesServiceIdPut");
      }

      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling configVpnVpnservicesServiceIdPut");
      }


      var pathParams = {
        'service_id': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/config/vpn/vpnservices/{service_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
